{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"My Experiments With Scala","name":"Experimenting scala","body":"## What is Scala.\r\nScala is a modern multi-paradigm programming language designed to express common programming patterns in a consise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages\r\n\r\n### What is Scala\r\n\r\nScala is a modern multi-paradigm programming language designed to express common programming patterns in a consise, elegant, and type-safe way. It smoothly integrates features of object-oriented and functional languages\r\n\r\n### Scala Is Object Oriented\r\n\r\nScala is a pure object oriented programming language, this includes numeric values and functions too. And as Scala is class based all the functions are instance of classes\r\n\r\nSuper class of all classes is scala.Any. It has two direct sub classes scala.AnyVal and scala.AnyRef defining two different class worlds one of values and other of references. All value classes are predefined, they are like the instance variables of Java scala.Double, scala.Float, scala.Long, scala.Byte, scala.Int, scala.Unit(corresponds to something like java)\r\n\r\nUser defined classes are in the scala.AnyRef and all the classes inherit the traits of scala.ScalaObject\r\n\r\nScala’s way of saying types and behaviors of objects is classes and traits\r\n\r\nClasses in Scala are static templates that can be instantiated into many objects at runtime\r\n\r\n\r\n\r\n```\r\nclass Point(xc: Int, yc: Int){\r\n      var x: Int = xc\r\n      var y: Int = yc\r\ndef move(dx: Int,dy: Int){\r\n      x = x + dx\r\n      y = y + dy\r\n}\r\noverride def toString(): String = “(” + x + “, ” + y + “)” ;\r\n}\r\n```\r\nSimilar to interfaces in Java, traits are used for defining objects and defining methods\r\n\r\n```\r\ntrait Similarity {\r\n    def isSimilar(x: Any): Boolean\r\n    def isNotSimilar(x: Any): Boolean = !isSimilar(x)\r\n}\r\n```\r\n\r\ntraits are integrated into class similarly as interfaces\r\n\r\n```\r\nclass Point(xc: Int, yc: Int) extends Similarity {\r\n      var x: Int = xc\r\n      var y: Int = yc\r\n      def isSimilar(obj: Any) =\r\n      obj.isInstanceOf[Point] &&\r\n      obj.asInstanceOf[Point].x == x\r\n}\r\n```\r\n\r\n```\r\nObject TraitsTest extends Application {\r\n      val p1 = new Point(2, 3)\r\n      val p2 = new Point(2, 4)\r\n      val p3 = new Point(3, 3)\r\n      println(p1.isNotSimilar(p2))\r\n      println(p1.isNotSimilar(p3))\r\n      println(p1.isNotSimilar(2))\r\n}\r\n```\r\n\r\n### Support or Contact\r\nHaving trouble with Anything? contact vidyasagar1729@gmail.com and i’ll try helping you sort it out.","google":""}